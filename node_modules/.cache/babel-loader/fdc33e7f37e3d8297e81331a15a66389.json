{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sergeyleontiev/Desktop/ReactProject/movies/src/Components/Movies/Movies.jsx\";\nimport React, { Component } from \"react\";\nimport { Movie } from \"../Movie/Movie\";\nimport { Preloader } from \"../Preloader/Preloader\";\nimport { Search } from \"../Search/Search\";\nimport './Movies.css';\n\nclass Movies extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: []\n    };\n\n    this.changeBg = id => {\n      const fillArr = this.state.movies.filter(item => item.imdbID === id);\n      document.body.style.backgroundImage = `url(${fillArr[0].Poster})`;\n    };\n\n    this.searchMovie = (movieName, movieType) => {\n      if (movie) fetch(`http://www.omdbapi.com/?apikey=8d1cc66c&s=${movieName}`).then(response => response.json()).then(post => {\n        if (post.Search === undefined) {\n          this.setState({\n            movies: []\n          });\n        } else {\n          this.setState({\n            movies: post.Search\n          });\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(`http://www.omdbapi.com/?apikey=8d1cc66c&s=Iron-Man`).then(response => response.json()).then(post => {\n      if (post.Search === undefined) {\n        this.setState({\n          movies: []\n        });\n      } else {\n        this.setState({\n          movies: post.Search\n        });\n      }\n    });\n  }\n\n  render() {\n    const {\n      movies\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Search, {\n        searchMovie: this.searchMovie\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), movies.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-container\",\n        children: movies.map(movie => {\n          return /*#__PURE__*/_jsxDEV(Movie, {\n            movieId: movie.imdbID,\n            title: movie.Title,\n            type: movie.Type,\n            year: movie.Year,\n            poster: movie.Poster,\n            changeBg: this.changeBg\n          }, movie.imdbID, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport { Movies };","map":{"version":3,"sources":["/Users/sergeyleontiev/Desktop/ReactProject/movies/src/Components/Movies/Movies.jsx"],"names":["React","Component","Movie","Preloader","Search","Movies","state","movies","changeBg","id","fillArr","filter","item","imdbID","document","body","style","backgroundImage","Poster","searchMovie","movieName","movieType","movie","fetch","then","response","json","post","undefined","setState","componentDidMount","render","length","map","Title","Type","Year"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,OAAO,cAAP;;AAEA,MAAMC,MAAN,SAAqBJ,SAArB,CAA+B;AAAA;AAAA;AAAA,SAC3BK,KAD2B,GACnB;AACJC,MAAAA,MAAM,EAAE;AADJ,KADmB;;AAAA,SAK3BC,QAL2B,GAKfC,EAAD,IAAQ;AACf,YAAMC,OAAO,GAAG,KAAKJ,KAAL,CAAWC,MAAX,CAAkBI,MAAlB,CAAyBC,IAAI,IAAIA,IAAI,CAACC,MAAL,KAAgBJ,EAAjD,CAAhB;AACAK,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,eAApB,GAAuC,OAAMP,OAAO,CAAC,CAAD,CAAP,CAAWQ,MAAO,GAA/D;AACH,KAR0B;;AAAA,SA0B3BC,WA1B2B,GA0Bb,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACpC,UAAGC,KAAH,EACAC,KAAK,CAAE,6CAA4CH,SAAU,EAAxD,CAAL,CACKI,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,IAAI,IAAI;AACV,YAAGA,IAAI,CAACvB,MAAL,KAAgBwB,SAAnB,EAA8B;AAC1B,eAAKC,QAAL,CAAc;AACVtB,YAAAA,MAAM,EAAE;AADE,WAAd;AAGH,SAJD,MAIO;AACH,eAAKsB,QAAL,CAAc;AACVtB,YAAAA,MAAM,EAAEoB,IAAI,CAACvB;AADH,WAAd;AAGH;AACJ,OAZL;AAaH,KAzC0B;AAAA;;AAU3B0B,EAAAA,iBAAiB,GAAG;AAChBP,IAAAA,KAAK,CAAE,oDAAF,CAAL,CACKC,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,IAAI,IAAI;AACV,UAAGA,IAAI,CAACvB,MAAL,KAAgBwB,SAAnB,EAA8B;AAC1B,aAAKC,QAAL,CAAc;AACVtB,UAAAA,MAAM,EAAE;AADE,SAAd;AAGH,OAJD,MAIO;AACH,aAAKsB,QAAL,CAAc;AACVtB,UAAAA,MAAM,EAAEoB,IAAI,CAACvB;AADH,SAAd;AAGH;AACJ,KAZL;AAaH;;AAmBD2B,EAAAA,MAAM,GAAG;AACL,UAAM;AAACxB,MAAAA;AAAD,QAAW,KAAKD,KAAtB;AACA,wBACI,QAAC,KAAD,CAAO,QAAP;AAAA,8BAEA,QAAC,MAAD;AACI,QAAA,WAAW,EAAE,KAAKa;AADtB;AAAA;AAAA;AAAA;AAAA,cAFA,EAOQZ,MAAM,CAACyB,MAAP,gBACA;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,kBAEIzB,MAAM,CAAC0B,GAAP,CAAWX,KAAK,IAAI;AAChB,8BACI,QAAC,KAAD;AAEI,YAAA,OAAO,EAAEA,KAAK,CAACT,MAFnB;AAGI,YAAA,KAAK,EAAES,KAAK,CAACY,KAHjB;AAII,YAAA,IAAI,EAAEZ,KAAK,CAACa,IAJhB;AAKI,YAAA,IAAI,EAAEb,KAAK,CAACc,IALhB;AAMI,YAAA,MAAM,EAAEd,KAAK,CAACJ,MANlB;AAOI,YAAA,QAAQ,EAAI,KAAKV;AAPrB,aACSc,KAAK,CAACT,MADf;AAAA;AAAA;AAAA;AAAA,kBADJ;AAWH,SAZD;AAFJ;AAAA;AAAA;AAAA;AAAA,cADA,gBAkBD,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cAzBP;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA8BH;;AA3E0B;;AA8E/B,SAASR,MAAT","sourcesContent":["import React, { Component } from \"react\";\nimport { Movie } from \"../Movie/Movie\";\nimport { Preloader } from \"../Preloader/Preloader\";\nimport { Search } from \"../Search/Search\";\nimport './Movies.css';\n\nclass Movies extends Component {\n    state = {\n        movies: []\n    }\n\n    changeBg = (id) => {\n        const fillArr = this.state.movies.filter(item => item.imdbID === id);\n        document.body.style.backgroundImage = `url(${fillArr[0].Poster})`;\n    }\n\n    componentDidMount() {\n        fetch(`http://www.omdbapi.com/?apikey=8d1cc66c&s=Iron-Man`)\n            .then(response => response.json())\n            .then(post => {\n                if(post.Search === undefined) {\n                    this.setState({\n                        movies: [],\n                    })\n                } else {\n                    this.setState({\n                        movies: post.Search\n                    })\n                }\n            })\n    }\n\n    searchMovie = (movieName, movieType) => {\n        if(movie)\n        fetch(`http://www.omdbapi.com/?apikey=8d1cc66c&s=${movieName}`)\n            .then(response => response.json())\n            .then(post => {\n                if(post.Search === undefined) {\n                    this.setState({\n                        movies: [],\n                    })\n                } else {\n                    this.setState({\n                        movies: post.Search\n                    })\n                }\n            })\n    }\n\n    render() {\n        const {movies} = this.state;\n        return (\n            <React.Fragment>\n\n            <Search \n                searchMovie={this.searchMovie}\n            />\n\n                {  \n                    movies.length ? \n                    <div className=\"movie-container\">\n                       {\n                        movies.map(movie => {\n                            return ( \n                                <Movie\n                                    key={movie.imdbID}\n                                    movieId={movie.imdbID}\n                                    title={movie.Title}\n                                    type={movie.Type}\n                                    year={movie.Year}\n                                    poster={movie.Poster}\n                                    changeBg = {this.changeBg}\n                                />\n                            )\n                        })\n                       }\n                    </div>\n                 : <Preloader /> \n                }\n            </React.Fragment>\n        )\n    }\n}\n\nexport { Movies }"]},"metadata":{},"sourceType":"module"}